"""
Django settings for zcore project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import cloudinary
import cloudinary.uploader
import cloudinary.api
from dotenv import load_dotenv
from datetime import timedelta


load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == "True"

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = ['https://fundfair.up.railway.app', 'https://www.fundfair.up.railway.app']
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
# CSRF_COOKIE_DOMAIN = '.up.railway.app'
CORS_ALLOW_HEADERS = (
    "x-requested-with",
    "content-type",
    "accept",
    "origin",
    "authorization",
    "accept-encoding",
    "access-control-allow-origin",
    "content-disposition",
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'whitenoise.runserver_nostatic',
    'cloudinary_storage',
    'cloudinary',

    # third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_spectacular',

    # local apps
    'fundfair',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zcore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zcore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

else:
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get('DB_ENGINE'),
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'zcore/static'),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS') == "True"

# Custom user model
AUTH_USER_MODEL = 'fundfair.CustomUser'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'NON_FIELD_ERRORS_KEY': 'error',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'FundFair API',
    'DESCRIPTION': 'Support without borders',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

{
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
}

# cloudinary config
CLOUDINARY_STORAGE = {
   'CLOUD_NAME': os.getenv('CLOUD_NAME'),
   'API_KEY': os.getenv('API_KEY'),
   'API_SECRET': os.getenv('API_SECRET')
}

cloudinary.config(
   cloud_name=CLOUDINARY_STORAGE['CLOUD_NAME'],
   api_key=CLOUDINARY_STORAGE['API_KEY'],
   api_secret=CLOUDINARY_STORAGE['API_SECRET']
)

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

WALLET_SECRET_KEY = os.environ.get('WALLET_SECRET_KEY')
CONTRACT_ADDRESS = os.environ.get('CONTRACT_ADDRESS')
CONTRACT_OWNER_ADDRESS = os.environ.get('CONTRACT_OWNER_ADDRESS')
CHAIN_ID = 11155420


CONTRACT_ABI = [
  {
    "type": "constructor",
    "name": "",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CampaignClosed",
    "inputs": [
      {
        "type": "uint256",
        "name": "campaignId",
        "indexed": True,
        "internalType": "uint256"
      },
      {
        "type": "address",
        "name": "owner",
        "indexed": True,
        "internalType": "address"
      },
      {
        "type": "bool",
        "name": "isSuccessful",
        "indexed": False,
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "anonymous": False
  },
  {
    "type": "event",
    "name": "CampaignCreated",
    "inputs": [
      {
        "type": "uint256",
        "name": "campaignId",
        "indexed": True,
        "internalType": "uint256"
      },
      {
        "type": "address",
        "name": "owner",
        "indexed": True,
        "internalType": "address"
      },
      {
        "type": "string",
        "name": "title",
        "indexed": False,
        "internalType": "string"
      },
      {
        "type": "uint256",
        "name": "target",
        "indexed": False,
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "anonymous": False
  },
  {
    "type": "event",
    "name": "CampaignFunded",
    "inputs": [
      {
        "type": "uint256",
        "name": "campaignId",
        "indexed": True,
        "internalType": "uint256"
      },
      {
        "type": "address",
        "name": "donor",
        "indexed": True,
        "internalType": "address"
      },
      {
        "type": "uint256",
        "name": "amount",
        "indexed": False,
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "anonymous": False
  },
  {
    "type": "function",
    "name": "campaigns",
    "inputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "type": "address",
        "name": "owner",
        "internalType": "address"
      },
      {
        "type": "string",
        "name": "title",
        "internalType": "string"
      },
      {
        "type": "string",
        "name": "description",
        "internalType": "string"
      },
      {
        "type": "uint256",
        "name": "target",
        "internalType": "uint256"
      },
      {
        "type": "uint256",
        "name": "deadline",
        "internalType": "uint256"
      },
      {
        "type": "uint256",
        "name": "amountRaised",
        "internalType": "uint256"
      },
      {
        "type": "string",
        "name": "image",
        "internalType": "string"
      },
      {
        "type": "bool",
        "name": "isFundingGoalReached",
        "internalType": "bool"
      },
      {
        "type": "bool",
        "name": "isCampaignClosed",
        "internalType": "bool"
      },
      {
        "type": "uint8",
        "name": "fundingModel",
        "internalType": "enum FundFair.FundingModel"
      },
      {
        "type": "uint8",
        "name": "category",
        "internalType": "enum FundFair.CauseCategory"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "closeCampaign",
    "inputs": [
      {
        "type": "uint256",
        "name": "_id",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createCampaign",
    "inputs": [
      {
        "type": "address",
        "name": "_owner",
        "internalType": "address"
      },
      {
        "type": "string",
        "name": "_title",
        "internalType": "string"
      },
      {
        "type": "string",
        "name": "_description",
        "internalType": "string"
      },
      {
        "type": "uint256",
        "name": "_target",
        "internalType": "uint256"
      },
      {
        "type": "uint256",
        "name": "_deadline",
        "internalType": "uint256"
      },
      {
        "type": "string",
        "name": "_image",
        "internalType": "string"
      },
      {
        "type": "string",
        "name": "_fundingModel",
        "internalType": "string"
      },
      {
        "type": "uint8",
        "name": "_category",
        "internalType": "enum FundFair.CauseCategory"
      }
    ],
    "outputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "deployer",
    "inputs": [],
    "outputs": [
      {
        "type": "address",
        "name": "",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "fundCampaign",
    "inputs": [
      {
        "type": "uint256",
        "name": "_id",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "getCampaigns",
    "inputs": [],
    "outputs": [
      {
        "type": "tuple[]",
        "name": "",
        "components": [
          {
            "type": "address",
            "name": "owner",
            "internalType": "address"
          },
          {
            "type": "string",
            "name": "title",
            "internalType": "string"
          },
          {
            "type": "string",
            "name": "description",
            "internalType": "string"
          },
          {
            "type": "uint256",
            "name": "target",
            "internalType": "uint256"
          },
          {
            "type": "uint256",
            "name": "deadline",
            "internalType": "uint256"
          },
          {
            "type": "uint256",
            "name": "amountRaised",
            "internalType": "uint256"
          },
          {
            "type": "string",
            "name": "image",
            "internalType": "string"
          },
          {
            "type": "address[]",
            "name": "donators",
            "internalType": "address[]"
          },
          {
            "type": "uint256[]",
            "name": "donations",
            "internalType": "uint256[]"
          },
          {
            "type": "bool",
            "name": "isFundingGoalReached",
            "internalType": "bool"
          },
          {
            "type": "bool",
            "name": "isCampaignClosed",
            "internalType": "bool"
          },
          {
            "type": "uint8",
            "name": "fundingModel",
            "internalType": "enum FundFair.FundingModel"
          },
          {
            "type": "uint8",
            "name": "category",
            "internalType": "enum FundFair.CauseCategory"
          }
        ],
        "internalType": "struct FundFair.Campaign[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getFunders",
    "inputs": [
      {
        "type": "uint256",
        "name": "_id",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "type": "address[]",
        "name": "",
        "internalType": "address[]"
      },
      {
        "type": "uint256[]",
        "name": "",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "numberOfCampaigns",
    "inputs": [],
    "outputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdraw",
    "inputs": [
      {
        "type": "uint256",
        "name": "_campaignId",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]